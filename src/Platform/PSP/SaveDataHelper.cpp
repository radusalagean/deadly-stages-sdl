#include "SaveDataHelper.hpp"

#include <string>
#include "../../Adapter/OptionsAdapter.hpp"
#include <memory.h>
#include <psputility.h>
#include <pspdisplay.h>
#include "../../Core/Config.hpp"
#include "../../Debug/Logger.hpp"

// Autogenerated with: `bin2c ICON0.PNG icon0.h icon0`
#include "icon0.h"

// Autogenerated with: `bin2c PIC1.PNG pic1.h pic1`
#include "pic1.h"

void platformSaveOptions()
{
    SaveDataHelper::saveOptions();
}

void platformLoadOptions()
{
    SaveDataHelper::loadOptions();
}

namespace SaveDataHelper
{
    char key[] = "SOMEKEYHERE12345"; // Key to encrypt or decrypt savedata

    void saveOptions()
    {
        OptionsModel options = OptionsAdapter::extractOptionsFromGame();
        std::string optionsXml = OptionsAdapter::serializeOptions(options);
        size_t dataSize = optionsXml.size() + 1;

        PspUtilitySavedataMode mode = PSP_UTILITY_SAVEDATA_AUTOSAVE;
        SceUtilitySavedataParam savedata;

        memset(&savedata, 0, sizeof(SceUtilitySavedataParam));
	    savedata.base.size = sizeof(SceUtilitySavedataParam);

        savedata.base.language = PSP_SYSTEMPARAM_LANGUAGE_ENGLISH;
        savedata.base.buttonSwap = PSP_UTILITY_ACCEPT_CROSS;
        savedata.base.graphicsThread = 0x11;
        savedata.base.accessThread = 0x13;
        savedata.base.fontThread = 0x12;
        savedata.base.soundThread = 0x10;

        savedata.mode = mode;
        savedata.overwrite = 1;

        #ifdef PLATFORM_PSP_SUPPORTS_SAVE_DATA_ENCRYPTION
            strncpy(savedata.key, key, 16);
        #endif

        strcpy(savedata.gameName, "DSREMIX");
        strcpy(savedata.saveName, "0000");

        strcpy(savedata.fileName, "DATA.BIN");

        savedata.dataBuf = calloc(1, dataSize);
        savedata.dataBufSize = dataSize;
        savedata.dataSize = dataSize;
        strcpy((char*)savedata.dataBuf, optionsXml.c_str());
        
        strcpy(savedata.sfoParam.title, "Deadly Stages Remix");
        strcpy(savedata.sfoParam.savedataTitle, "Options");
        strcpy(savedata.sfoParam.detail, "");

        savedata.pic1FileData.buf = pic1;
        savedata.pic1FileData.bufSize = size_pic1;
        savedata.pic1FileData.size = size_pic1;

        savedata.icon0FileData.buf = icon0;
        savedata.icon0FileData.bufSize = size_icon0;
        savedata.icon0FileData.size = size_icon0;

        sceUtilitySavedataInitStart(&savedata);


        bool saving = true;

        while (saving)
        {
            switch(sceUtilitySavedataGetStatus())
            {
            case PSP_UTILITY_DIALOG_INIT:
                logd("PSP_UTILITY_DIALOG_INIT");
                break;

            case PSP_UTILITY_DIALOG_VISIBLE:
                logd("PSP_UTILITY_DIALOG_VISIBLE");
                sceUtilitySavedataUpdate(1);
                break;

            case PSP_UTILITY_DIALOG_QUIT:
                logd("PSP_UTILITY_DIALOG_QUIT");
                sceUtilitySavedataShutdownStart();
                break;

            case PSP_UTILITY_DIALOG_FINISHED:
                logd("PSP_UTILITY_DIALOG_FINISHED");
                break;

            case PSP_UTILITY_DIALOG_NONE:
                logd("PSP_UTILITY_DIALOG_NONE");
                saving = false;
                break;
            }

            sceDisplayWaitVblankStart();
        }
    }

    void loadOptions()
    {
        PspUtilitySavedataMode mode = PSP_UTILITY_SAVEDATA_AUTOLOAD;
        SceUtilitySavedataParam savedata;

        memset(&savedata, 0, sizeof(SceUtilitySavedataParam));
	    savedata.base.size = sizeof(SceUtilitySavedataParam);

        savedata.base.language = PSP_SYSTEMPARAM_LANGUAGE_ENGLISH;
        savedata.base.buttonSwap = PSP_UTILITY_ACCEPT_CROSS;
        savedata.base.graphicsThread = 0x11;
        savedata.base.accessThread = 0x13;
        savedata.base.fontThread = 0x12;
        savedata.base.soundThread = 0x10;

        savedata.mode = mode;

        #ifdef PLATFORM_PSP_SUPPORTS_SAVE_DATA_ENCRYPTION
            strncpy(savedata.key, key, 16);
        #endif

        strcpy(savedata.gameName, "DSREMIX");
        strcpy(savedata.saveName, "0000");

        strcpy(savedata.fileName, "DATA.BIN");

        size_t dataSize = 100 * 1024; // 100 KB
        savedata.dataBuf = calloc(1, dataSize);
        savedata.dataBufSize = dataSize;
        savedata.dataSize = dataSize;

        sceUtilitySavedataInitStart(&savedata);

        std::string loadedData;

        bool loading = true;

        while (loading)
        {
            switch(sceUtilitySavedataGetStatus())
            {
            case PSP_UTILITY_DIALOG_INIT:
                logd("PSP_UTILITY_DIALOG_INIT");
                break;

            case PSP_UTILITY_DIALOG_VISIBLE:
                logd("PSP_UTILITY_DIALOG_VISIBLE");
                sceUtilitySavedataUpdate(1);
                break;

            case PSP_UTILITY_DIALOG_QUIT:
                logd("PSP_UTILITY_DIALOG_QUIT");
                sceUtilitySavedataShutdownStart();
                break;

            case PSP_UTILITY_DIALOG_FINISHED:
                logd("PSP_UTILITY_DIALOG_FINISHED");
                break;

            case PSP_UTILITY_DIALOG_NONE:
                logd("PSP_UTILITY_DIALOG_NONE");
                loadedData = std::string((char*)savedata.dataBuf);
                logd("Loaded options:\n%s\n\n", loadedData.c_str());
                loading = false;
                break;
            }

            sceDisplayWaitVblankStart();
        }

        OptionsModel options = OptionsAdapter::deserializeOptions(loadedData);
        OptionsAdapter::applyOptionsFromModel(options);
    }
}
